{"project":{"settings":{"base":"/home/travis/build/sbosnick/selection","settings_path":"/home/travis/build/sbosnick/selection/.art/settings.toml","code_paths":["/home/travis/build/sbosnick/selection/elf-preload/src/layout/strategy.rs","/home/travis/build/sbosnick/selection/elf-preload/src/layout.rs","/home/travis/build/sbosnick/selection/elf-preload/src/lib.rs","/home/travis/build/sbosnick/selection/elf-preload/tests/elflint.rs","/home/travis/build/sbosnick/selection/elf-preload/tests/generaltst.rs","/home/travis/build/sbosnick/selection/sel4-build/src/hosted.rs","/home/travis/build/sbosnick/selection/sel4-build/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-am335x/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-apq8064/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-exynos4/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-exynos5250/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-exynos5410/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-exynos5422/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-hikey/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-imx7sabre/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-omap3/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-pc99/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-pc99/tests/kernel.rs","/home/travis/build/sbosnick/selection/sel4-plat-rpi3/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-sabre/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-tk1/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-tx1/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-tx2/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-ultra96/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-wandq/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-zynq7000/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-plat-zynqmp/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-sys/Cargo.toml","/home/travis/build/sbosnick/selection/sel4-sys/build.rs","/home/travis/build/sbosnick/selection/sel4-sys/examples/smoketest.rs","/home/travis/build/sbosnick/selection/sel4-sys/src/lib.rs","/home/travis/build/sbosnick/selection/sel4-sys/tests/platform.rs"],"exclude_code_paths":[],"artifact_paths":["/home/travis/build/sbosnick/selection/design"],"exclude_artifact_paths":[],"code_url":null,"parse":{"md_name":{"type":"default"}},"format":{"md_attrs":{"type":"hashes"}},"export":{"md_header":null,"md_toc":false,"md_family":{"type":"list"},"md_dot":{"type":"ignore"},"md_name":{"type":"default"}}},"code_impls":{"SPC-elfpreload":{"primary":{"file":"/home/travis/build/sbosnick/selection/elf-preload/src/lib.rs","line":7},"secondary":{".nobss":{"file":"/home/travis/build/sbosnick/selection/elf-preload/src/layout/strategy.rs","line":53},".paddr":{"file":"/home/travis/build/sbosnick/selection/elf-preload/src/layout/strategy.rs","line":54},".plenum":{"file":"/home/travis/build/sbosnick/selection/elf-preload/src/layout/strategy.rs","line":55},".programheader":{"file":"/home/travis/build/sbosnick/selection/elf-preload/src/layout.rs","line":58},".ptload":{"file":"/home/travis/build/sbosnick/selection/elf-preload/src/layout/strategy.rs","line":52},".ptphdr":{"file":"/home/travis/build/sbosnick/selection/elf-preload/src/layout/strategy.rs","line":51}}},"SPC-sel4platcrate":{"primary":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-pc99/src/lib.rs","line":11},"secondary":{".am335x":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-am335x/src/lib.rs","line":8},".apq8064":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-apq8064/src/lib.rs","line":8},".buildcrate":{"file":"/home/travis/build/sbosnick/selection/sel4-build/src/lib.rs","line":8},".class":{"file":"/home/travis/build/sbosnick/selection/sel4-build/src/hosted.rs","line":303},".exynos4":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-exynos4/src/lib.rs","line":8},".exynos5250":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-exynos5250/src/lib.rs","line":8},".exynos5410":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-exynos5410/src/lib.rs","line":8},".exynos5422":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-exynos5422/src/lib.rs","line":8},".hikey":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-hikey/src/lib.rs","line":8},".imx7sabre":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-imx7sabre/src/lib.rs","line":8},".omap3":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-omap3/src/lib.rs","line":8},".pc99":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-pc99/src/lib.rs","line":8},".rpi3":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-rpi3/src/lib.rs","line":8},".sabre":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-sabre/src/lib.rs","line":8},".tk1":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-tk1/src/lib.rs","line":8},".tx1":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-tx1/src/lib.rs","line":8},".tx2":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-tx2/src/lib.rs","line":8},".ultra96":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-ultra96/src/lib.rs","line":8},".wandq":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-wandq/src/lib.rs","line":8},".zynq7000":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-zynq7000/src/lib.rs","line":8},".zynqmp":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-zynqmp/src/lib.rs","line":8}}},"SPC-sel4syscrate":{"primary":{"file":"/home/travis/build/sbosnick/selection/sel4-sys/Cargo.toml","line":0},"secondary":{".bingen":{"file":"/home/travis/build/sbosnick/selection/sel4-sys/build.rs","line":18},".cmake":{"file":"/home/travis/build/sbosnick/selection/sel4-sys/build.rs","line":14}}},"TST-elfpreload":{"primary":{"file":"/home/travis/build/sbosnick/selection/elf-preload/tests/generaltst.rs","line":7},"secondary":{".elflint":{"file":"/home/travis/build/sbosnick/selection/elf-preload/tests/elflint.rs","line":7},".idempotent":{"file":"/home/travis/build/sbosnick/selection/elf-preload/tests/generaltst.rs","line":25},".nosections":{"file":"/home/travis/build/sbosnick/selection/elf-preload/tests/generaltst.rs","line":75},".segments":{"file":"/home/travis/build/sbosnick/selection/elf-preload/tests/generaltst.rs","line":52}}},"TST-sel4platcrate":{"primary":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-pc99/tests/kernel.rs","line":13},"secondary":{}},"TST-sel4syscrate":{"primary":{"file":"/home/travis/build/sbosnick/selection/sel4-sys/Cargo.toml","line":0},"secondary":{".compile":{"file":"/home/travis/build/sbosnick/selection/sel4-sys/examples/smoketest.rs","line":29},".platform":{"file":"/home/travis/build/sbosnick/selection/sel4-sys/tests/platform.rs","line":23}}}},"artifacts":{"REQ-bootloader":{"id":"gvSU0P8tF0eV9wHz6o-MEw","name":"REQ-bootloader","file":"/home/travis/build/sbosnick/selection/design/loader.md","partof":["REQ-finalbinary"],"parts":["REQ-sel4loadercrate","REQ-ubootrtcrate"],"completed":{"spc":0.0,"tst":0.0},"text":"The bootloader will be a binary crate provided by the user that relies on library\ncrates provided by **selection**. The bootloader will accept a handoff from \n*U-Boot*, then (through the support libraries) configure the initial VSpace\nfor the seL4 microkernel and handoff to the microkernel in a way that identifies\nthe rootserver.\n","impl_":{"type":"NotImpl"},"subnames":[]},"REQ-cargocmd":{"id":"YEO1pPBwe7LeTY7tbSndHg","name":"REQ-cargocmd","file":"/home/travis/build/sbosnick/selection/design/cargocmd.md","partof":["REQ-finalbinary"],"parts":["SPC-cargocmd"],"completed":{"spc":0.5,"tst":0.333},"text":"**selection** shall have a cargo subcommand called \"cargo-fit\" which can be\ninvoked as \"cargo fit ...\". \"cargo-fit\" shall be a CLI application which will\n\n- locate a bootloader crate, the seL4 microkernel, and a root server crate in\n  the current workspace,\n- post-process the three ELF files into the expected format, and\n- combined the post-processed ELF files into a u-boot FIT format file\n","impl_":{"type":"NotImpl"},"subnames":[]},"REQ-configure":{"id":"4QuAkjFZajOdicSPbvsQzQ","name":"REQ-configure","file":"/home/travis/build/sbosnick/selection/design/purpose.md","partof":["REQ-purpose"],"parts":["REQ-sel4platcrate","REQ-sel4syscrate"],"completed":{"spc":0.94,"tst":0.875},"text":"The configuration of the seL4 microkernel build shall be mapped into the *cargo*\nbuild system in as natural a way as possible.\n\nThe seL4 microkernel configuration options can be devided into four categories:\n\n1. KernelPlatform\n2. Other Kernel\\* options that affect the user/kernel ABI\n3. Other Kernel\\* options that don't affect the user/kernel ABI\n4. LibSel4\\* options\n\n## KernelPlatform\nThe mechanism for setting the appropriate KernelPlatform value shall be exposed \nby having a separate crate for each supported platform and requiring the user to\ndepend on a platform crate. It may be possible to support depending on one platform\ncrate per architecture.\n\n## Kernel\\* ABI Options\nKernel\\* ABI options (other than options with 'Dangerous' in their name) shall be set\nbased on the configuration that *cargo* makes available to build.rs scripts. This will\nprimarily be the environment variables CARGO_CFG_TARGET_ARCH and PROFILE. Dangerous \nKernel\\* ABI options shall be disabled.\n\n## Kernel\\* non-ABI Options\nKernel\\* options that do not affect the user/kernel ABI (i.e. tweaks) shall be\ngrouped into meaningful \"classes\" which are then exposed as *cargo* features on\nall of the platform crates.\n\n## LibSel4\\* options\nThese options may be set to whatever fixed values most facilitate building a Rust\ninterface to the libsel4 library.\n","impl_":{"type":"NotImpl"},"subnames":[]},"REQ-finalbinary":{"id":"KHv-ZVIrUfHRvzcwd6Vy5g","name":"REQ-finalbinary","file":"/home/travis/build/sbosnick/selection/design/purpose.md","partof":["REQ-purpose"],"parts":["REQ-bootloader","REQ-cargocmd","REQ-microkernel","REQ-rootserver"],"completed":{"spc":0.463,"tst":0.443},"text":"The final binary produced by the *cargo* build shall be a single file that can be\nbooted by the *U-Boot* `bootm` command. It shall be produced by a custom *cargo*\nsubcommand.\n\nThe final FIT file shall contain three executables (which will be post-processed\nELF files) as follow:\n\n- a boot loader [written in Rust]\n- the seL4 microkernel [from a released version of the seL4 project]\n- a root server [written in Rust]\n\nIt may be possible to extend the format of the final binary to include other\nservers in addition to the root server, but this would require support from the\nboot loader and the root server.\n","impl_":{"type":"NotImpl"},"subnames":[]},"REQ-microkernel":{"id":"OP-j-IMryBBH-fgV_2wlXg","name":"REQ-microkernel","file":"/home/travis/build/sbosnick/selection/design/kernel.md","partof":["REQ-finalbinary"],"parts":["REQ-sel4platcrate"],"completed":{"spc":0.88,"tst":1.0},"text":"**selection** shall compile the seL4 microkernel binary and make it available\nto form part of the final binary.\n","impl_":{"type":"NotImpl"},"subnames":[]},"REQ-purpose":{"id":"YrLUrt9PDCSE0I5T8sbfcw","name":"REQ-purpose","file":"/home/travis/build/sbosnick/selection/design/purpose.md","partof":[],"parts":["REQ-configure","REQ-finalbinary","REQ-testing"],"completed":{"spc":0.467,"tst":0.439},"text":"The goal of this project is to provide a natural embedding of the building\nof a system based around the seL4 microkernel into the Rust ecosystem. A project\nusing this embedding will be built using *cargo* and will be able to be bootstrapped\nfrom *U-Boot*.\n\nThe formal proof that accompanies seL4 is superior to the additional assurances that\ncome with Rust's borrow checker, but it may have limits on its scaleability. **selection**\nis an attept to combine the formally proven seL4 microkernel with the addition assurances\nthat Rust brings for the parts of the whole system that are not formally proven.\n\n**selection** shall support the following architectures: x86_64, aarch32, and aarch64.\nIt will not initally support the ia32 (or i686) architecture, though such support may be\nadded later if an appropriate target spec json can be developed.\n","impl_":{"type":"NotImpl"},"subnames":[]},"REQ-rootserver":{"id":"4aoyCqSQKOrlMwSKdvle_w","name":"REQ-rootserver","file":"/home/travis/build/sbosnick/selection/design/rootserver.md","partof":["REQ-finalbinary"],"parts":["REQ-sel4crate","REQ-sel4platcrate","REQ-sel4rtcrate","REQ-sel4syscrate"],"completed":{"spc":0.47,"tst":0.438},"text":"The rootserver will be a binary crate provided by the user that relies on library\ncrates provided by **selection**. The boot loader support libraries shall ensure\nthat the seL4 microkernel tranfers control to the rootserver after its initial booting.\n","impl_":{"type":"NotImpl"},"subnames":[]},"REQ-sel4crate":{"id":"CZHNcrDPQjDl6sL7VuDtVg","name":"REQ-sel4crate","file":"/home/travis/build/sbosnick/selection/design/rootserver.md","partof":["REQ-rootserver"],"parts":[],"completed":{"spc":0.0,"tst":0.0},"text":"**selection** shall provide a library crate called 'seL4' that exposes a Rust\nfriendly interface to the kernel objects from the the seL4 microkernel. This\nlibrary will be the main connection from a server (including the rootserver)\nrunning on a seL4 microkernel (and using this project).\n","impl_":{"type":"NotImpl"},"subnames":[]},"REQ-sel4loadercrate":{"id":"p5Q7DECdXPDUEZxXMTrsGA","name":"REQ-sel4loadercrate","file":"/home/travis/build/sbosnick/selection/design/loader.md","partof":["REQ-bootloader"],"parts":[],"completed":{"spc":0.0,"tst":0.0},"text":"**selection** shall provide a library crate called 'seL4-loader' which will use \ninformation from the *U-Boot* handoff to locate the seL4 microkernel and the \nrootserver in memory, set up the initial VSpace for booting the microkernel,\nenable the MMU, then handoff to the microkernel passing it information about\nthe location of the rootserver.\n","impl_":{"type":"NotImpl"},"subnames":[]},"REQ-sel4platcrate":{"id":"LBQOUd18LidKe5EAuq_i0w","name":"REQ-sel4platcrate","file":"/home/travis/build/sbosnick/selection/design/sel4plat.md","partof":["REQ-configure","REQ-microkernel","REQ-rootserver"],"parts":["SPC-sel4platcrate"],"completed":{"spc":0.88,"tst":1.0},"text":"**selection** shall provide a collection of library crates, one for each platform \nsupported by both seL4 and Rust. These platform crates shall expose any platform\nspecific parts of libsel4 for a given platform.\n\nThe platform crates shall also compile the seL4 microkernel binary itself as a side\neffect of being built.\n\nThe platform crates shall expose *cargo* features for \"classes\" of seL4 Kernel\\*\nnon-ABI options.\n","impl_":{"type":"NotImpl"},"subnames":[]},"REQ-sel4rtcrate":{"id":"P3yzaYKKEeF7vIrUrRGxRw","name":"REQ-sel4rtcrate","file":"/home/travis/build/sbosnick/selection/design/rootserver.md","partof":["REQ-rootserver"],"parts":[],"completed":{"spc":0.0,"tst":0.0},"text":"**selection** shall provide a library crate called 'seL4-rt' that provides a\n[no-std] Rust runtime and a way of exposing the entry point required by a seL4\nrootserver. 'seL4-rt' shall provide the Rust types to expose the seL4 BootInfo\nframe. 'sel4-rt' will not be appropriate for servers other than the rootserver.\n","impl_":{"type":"NotImpl"},"subnames":[]},"REQ-sel4syscrate":{"id":"TUw3aM-ZIY3DcjWXjx8Ytw","name":"REQ-sel4syscrate","file":"/home/travis/build/sbosnick/selection/design/sel4sys.md","partof":["REQ-configure","REQ-rootserver"],"parts":["SPC-sel4syscrate"],"completed":{"spc":1.0,"tst":0.75},"text":"**selection** shall provide a library crate called 'seL4-sys' that is generated\nfrom the libsel4 subdirectory of the seL4 source code. This crate shall exclude\nany platform specific parts of libsel4.\n\n'seL4-sys' shall expose the seL4 Kernel\\* ABI options (other than KernelPlatform)\nthrough the use of the configuration the *cargo* makes available to build.rs scripts.\n","impl_":{"type":"NotImpl"},"subnames":[]},"REQ-testing":{"id":"RHGHt9-fBXedz8W9jMIqUQ","name":"REQ-testing","file":"/home/travis/build/sbosnick/selection/design/purpose.md","partof":["REQ-purpose"],"parts":[],"completed":{"spc":0.0,"tst":0.0},"text":"**selection** shall expose a means of easily running test under QEUM or on \nactual hardware. The means of running tests shall be linked into the *cargo*\ntest subcommand, if possible.\n","impl_":{"type":"NotImpl"},"subnames":[]},"REQ-ubootrtcrate":{"id":"g2gmQ5VA7HhC4KawZRffkQ","name":"REQ-ubootrtcrate","file":"/home/travis/build/sbosnick/selection/design/loader.md","partof":["REQ-bootloader"],"parts":[],"completed":{"spc":0.0,"tst":0.0},"text":"**selection** shall provide a library crate called 'uboot-rt' that provides a\n[no-std] Rust runtime and a way of exposing the entry point required for a *U-Boot*\nhandoff using the 'bootm' command. The provided entry point shall be suitable for\nan \"os = linux, type = kernal\" kernal in a *U-Boot* FIT image.\n","impl_":{"type":"NotImpl"},"subnames":[]},"SPC-cargocmd":{"id":"DZPribOITXgNcjVAOL7ZtQ","name":"SPC-cargocmd","file":"/home/travis/build/sbosnick/selection/design/cargocmd.md","partof":["REQ-cargocmd"],"parts":["SPC-elfpreload","SPC-fitimage","TST-cargocmd"],"completed":{"spc":0.5,"tst":0.333},"text":"\"cargo-fit\" shall use [structopt], [exitfailure], [human-panic], and [failure]\nto implement a CLI for locating, post-processing, and combining the three ELF\nfiles that make up the final binary.\n\nIt shall use the [cargo-metadata] crate to locate three ELF files assocated\nwith the current *cargo* workspace:\n\n- the output of a user-supplied binary crate which is the bootloader,\n- the seL4 microkernel build as a side-effect of building one of the\n  sel4-plat-\\* crates, and\n- the output of a user-supplied binary crate which is the root server.\n\nThe bootloader and the root server shall be identified using convention over\nconfiguration, but will have a fall-back of configuration in the workspace\nroot Cargo.toml file (in a \"package.metadata\" table). The seL4 microkernel\nshall be identified by looking for a \"kernel.elf\" file in the \"OUT\\_DIR\" of\na sel4-plat-\\* crate that is a dependency of the root server.\n\n\"cargo-fit\" shall use [[SPC-elfpreload]] to post-process the three identified\nELF binaries (bootloader, seL4 microkernel, and the root server). The paddr\nfor the seL4 microkernel shall be specified to follow the paddr from the input\nfile. The paddr for the bootloader shall be specified to an address that places \nthe whole bootloader before the microkernel. The paddr for the root server\nshall be specified to an address that places the root server immediately after\nthe microkernel in physical memory.\n\n\"cargo-fit\" shall use [[SPC-fitimage]] to combine the three post-processed ELF\nfiles into the final binary file. It shall use the description from the package\nmetadata for the root server pacakage as the description  for the FIT file. It\nmay provide a means of configuring an FDT file to use in the FIT file (possibly\nin a \"package.metadata\" table).\n\n[cargo-metadata]: https://crates.io/crates/cargo_metadata\n[structopt]: https://crates.io/crates/structopt \n[exitfailure]: https://crates.io/crates/exitfailure\n[human-panic]: https://crates.io/crates/human-panic\n[failure]: https://crates.io/crates/failure\n","impl_":{"type":"NotImpl"},"subnames":[]},"SPC-elfpreload":{"id":"Dto7-KB11RYcsm7KROIIDw","name":"SPC-elfpreload","file":"/home/travis/build/sbosnick/selection/design/cargocmd.md","partof":["SPC-cargocmd"],"parts":["TST-elfpreload"],"completed":{"spc":1.0,"tst":1.0},"text":"**selection** shall have a library crate called \"elf-preload\" for post-processing\nELF binary files into a memory image that is ready to be memcpy()'d to a particular\naddress in physical memory. \"elf-preload\" shall use [goblin] for its ELF manipulation.\n\nThe output of the post-processing shall also be an ELF file, but it shall have the\nfollowing constraints:\n\n- [[.programheader]]: it shall have program headers but no section headers;\n- [[.ptphdr]]: it shall have a PT_PHDR program header;\n- [[.ptload]]: other than the PT_PHDR, all other program headers shall be PT_LOAD;\n- [[.nobss]]: the filesz and memsz in each program header shall be equal\n- [[.paddr]]: the paddr in each program header shall be set as described below\n- [[.plenum]]: all parts of the ELF file will be described in the program headers\n\nThese constraints imply that the post-processed ELF file will not have any PT_DYNAMIC\nprogram headers which means that there will not be a dynamic segment. This in turn\nmeans that the file will have to be absolutely positioned(with no relocations). The\nlack of a dynamic segment and section headers means that there is no need for string\ntables or a symbol table. The plenum constraint requires that the ELF header and the\nprogram headers be included in the first PT_LOAD program header.\n\nThe paddr for each PT_LOAD program header shall immediately follow the end of \nthe segment identified by the previous program header (modulo padding). The \npaddr for the first PT_LOAD program header shall either be specified in the library call \nor shall be specified to follow the paddr from the input binary. It shall be an \nerror to specify using paddr from an input binary that lacks appropriate paddr values.\n\nAny input ELF file that cannot be post-processed to comply with the constraints shall\ncause an error.\n\nThe layout of the output file will be the following:\n\n```\n[elf header]\n[PT_PHDR]\n[PT_LOAD: elf header and all program headers]\n[PT_LOAD: segment 1]\n[PT_LOAD: segment 2]\n[PT_LOAD: segment 3]\n[segment 1 contents]\n[segment 2 contents]\n[segment 3 contents]\n```\n\n[goblin]: https://crates.io/crates/goblin\n","impl_":{"type":"Code","value":{"primary":{"file":"/home/travis/build/sbosnick/selection/elf-preload/src/lib.rs","line":7},"secondary":{".nobss":{"file":"/home/travis/build/sbosnick/selection/elf-preload/src/layout/strategy.rs","line":53},".paddr":{"file":"/home/travis/build/sbosnick/selection/elf-preload/src/layout/strategy.rs","line":54},".plenum":{"file":"/home/travis/build/sbosnick/selection/elf-preload/src/layout/strategy.rs","line":55},".programheader":{"file":"/home/travis/build/sbosnick/selection/elf-preload/src/layout.rs","line":58},".ptload":{"file":"/home/travis/build/sbosnick/selection/elf-preload/src/layout/strategy.rs","line":52},".ptphdr":{"file":"/home/travis/build/sbosnick/selection/elf-preload/src/layout/strategy.rs","line":51}}}},"subnames":[".nobss",".paddr",".plenum",".programheader",".ptload",".ptphdr"]},"SPC-fitimage":{"id":"mLxUgg1b_V-xfCc_lqcyfw","name":"SPC-fitimage","file":"/home/travis/build/sbosnick/selection/design/cargocmd.md","partof":["SPC-cargocmd"],"parts":["TST-fitimage"],"completed":{"spc":0.0,"tst":0.0},"text":"**selection** shall have a library crate called \"fitimage\" for making a u-boot\nFIT image from a collection of post-processed ELF files (one of which is the\nbootloader) and, optionally, an FDT file.\n\n## FDT Support\n\"fitimage\" shall have an internal module for creating a tree structure whose\nnodes have properties whose property names are interned (using [string-interner]).\nThis tree structure shall have a method for flattening it to flattened devicetree\nformat (dtb) as specified in chapter 5 of the [device tree specification].\n([[.fdtmodule]])\n\n## Fit Format File\n\"fitimage\" shall produce a [fit format][fit-format] file (built using the fdt\nmodule) with the following constraints:\n\n- [[.addresscells]]: the image-tree/#address-cells shall be 1 for 32 bit targets \n    and 2 for 64 bit targets;\n- [[.timestamp]]: the image-tree/timestamp shall be set to a provided value or\n    (by default) the current time\n- [[.description]]: the image-tree/description shall optionally be set to a\n    provided value\n- [[.bootloader]]: the provided bootloader ELF file shall be included as an\n    image of type \"kernal\" with an os of type \"linux\"\n- [[.otherelf]]: the other provided ELF files shall be included as images\n    of type \"ramdisk\" and os type \"linux\", they shall have the load address set;\n- [[.singleconfig]]: the image-tree/configurations shall have exactly one\n    configuration node which shall be the default;\n- [[.configkernel]]: the kernel property of the configuration shall identify\n    the bootloader image;\n- [[.configdescription]]: the description property of the configuration shall\n    be set to a fixed description;\n- [[.configloadables]]: the loadables property of the configuration shall\n    be set to a list of all the post-processed ELF files except the bootloader;\n- [[.configfdt]]: the fdt property of the configuration shall be set to the\n    provided FDT file with an overlay FDT of the \"fit-image\" FDT (described below)\n    if an FDT file is specified or to just the \"fit-image\" FDT file otherwise;\n\n## Fit-Image FDT\nAs described above, the fit format file produced by \"fitimage\" shall contain a\n\"fit-image\" FDT which is specified as either the sole FDT in the configuration or\nas an overlay FDT. The purpose of the \"fit-image\" FDT is to pass information about\nthe loadables included in the configuration to the bootloader. ([[.fitimageftd]])\n\nThe root node of the fit-image FDT shall have the following layout:\n\n```\n/ o fit-image\n    | - #address-cells = <1>\n    |\n    o image-1 \n    | | - load-addr = <00000000>\n    |\n    o image-2 \n    | | - load-addr = <00000000>\n    | ...\n```\n\nThe #address-cells property shall be manadetory and shall specify the number of\n32 bit cells required to represent the load addresses for each of the included\nimages. It shall be 1 for 32 bit targets and 2 for 64 bit targets.\n\nThe load-addr property of each image shall be manadetory. Its size in 32 bit cells\nshall be specified by the #address-cells property. It shall specify the physical \naddress at which the indicated image is to be loaded (or was loaded when the \nbootloader is running). It will point to an ELF header with further information\nabout the image since the loadable images include in the file produced by \"fitimage\"\nare required to be post-processed ELF files.\n\n[device tree specification]: https://github.com/devicetree-org/devicetree-specification/releases/tag/v0.2\n[fit-format]: https://github.com/u-boot/u-boot/blob/master/doc/uImage.FIT/source_file_format.txt\n[string-interner]: https://crates.io/crates/string-interner\n","impl_":{"type":"NotImpl"},"subnames":[".addresscells",".bootloader",".configdescription",".configfdt",".configkernel",".configloadables",".description",".fdtmodule",".fitimageftd",".otherelf",".singleconfig",".timestamp"]},"SPC-sel4platcrate":{"id":"bSSs-cjbJamIKOhgPd36Rw","name":"SPC-sel4platcrate","file":"/home/travis/build/sbosnick/selection/design/sel4plat.md","partof":["REQ-sel4platcrate"],"parts":["TST-sel4platcrate"],"completed":{"spc":0.88,"tst":1.0},"text":"[[.buildcrate]]\\:The use of [cmake] and [bindgen] from the sel4-sys crate's build.rs\nshall be extracted to a sel4-build crate that will contain the common build.rs logic\nfor sel4-sys and for all of the sel4-plat-\\* crates. The custom CMakeLists.txt file \nfrom sel4-sys may be moved to sel4-build, if possible, to avoid having to copy it to\neach platform crate.\n\nThere shall be the following platform crates:\n\n- [[.pc99]]\\: x86_64\n- [[.sabre]]\\: aarch32\n- [[.omap3]]\\: aarch32 (release only)\n- [[.am335x]]\\: aarch32 (release only)\n- [[.exynos4]]\\: aarch32\n- [[.exynos5410]]\\: aarch32\n- [[.exynos5422]]\\: aarch32\n- [[.exynos5250]]\\: aarch32\n- [[.apq8064]]\\: aarch32\n- [[.wandq]]\\: aarch32\n- [[.imx7sabre]]\\: aarch32\n- [[.zynq7000]]\\: aarch32\n- [[.zynqmp]]\\: aarch32\n- [[.ultra96]]\\: aarch32\n- [[.allwinnera20]]\\: aarch32\n- [[.tk1]]\\: aarch32\n- [[.hikey]]\\: aarch32 and aarch64\n- [[.rpi3]]\\: aarch32 and aarch64\n- [[.tx1]]\\: aarch64\n- [[.tx2]]\\: aarch64\n\nThe platform crates shall build the seL4 microkernal when they are being built for\nthe architecture listed, but is shall not be an error if the platform crate is being\nbuilt for a different architecture. For all of the platform crates the build.rs \nscript shall use [bindgen] to generate the platform specific parts of libsel4.a. \n(This may be included as part of sel4-build.)\n\nThe omap3 and am335x platforms will initially be restricted to supporting the release\nprofile in cargo (i.e. when complied with the --release flag) because of [issue 116].\nOnce that issue is resolved **selection** shall [[.support_debug_on_omap]] and\n[[.support_debug_on_am335x]].\n\n[[.class]]\\:The sel4-build crate shall expose two classes: Default, and Verified.\nAddtional classes may be added in the future. The Default class will use the \ndefault values for all non-ABI Kernel\\* options. The Verified class will use \nthe values from the .cmake files in the configs subdirectory of the seL4 project \nroot for the non-default values of non-ABI Kernel\\* options. The Verified class\nshall be exposed in each platform crate with a \"verified-class\" feature.\n\n**selection** will not support the kzm platform for two reasons. First, it is the\nonly ARMv6A platform supported by seL4 and would require its own target specification\nfile for the rust compiler. Second the [sel4-kzm] supported hardware page indicates\nthat \"The KZM is depreciated...\".\n\n[cmake]: https://crates.io/crates/cmake\n[bindgen]: https://crates.io/crates/bindgen\n[sel4-kzm]: https://docs.sel4.systems/Hardware/Kzm.html\n[issue 116]: https://github.com/seL4/seL4/issues/116\n","impl_":{"type":"Code","value":{"primary":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-pc99/src/lib.rs","line":11},"secondary":{".am335x":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-am335x/src/lib.rs","line":8},".apq8064":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-apq8064/src/lib.rs","line":8},".buildcrate":{"file":"/home/travis/build/sbosnick/selection/sel4-build/src/lib.rs","line":8},".class":{"file":"/home/travis/build/sbosnick/selection/sel4-build/src/hosted.rs","line":303},".exynos4":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-exynos4/src/lib.rs","line":8},".exynos5250":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-exynos5250/src/lib.rs","line":8},".exynos5410":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-exynos5410/src/lib.rs","line":8},".exynos5422":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-exynos5422/src/lib.rs","line":8},".hikey":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-hikey/src/lib.rs","line":8},".imx7sabre":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-imx7sabre/src/lib.rs","line":8},".omap3":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-omap3/src/lib.rs","line":8},".pc99":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-pc99/src/lib.rs","line":8},".rpi3":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-rpi3/src/lib.rs","line":8},".sabre":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-sabre/src/lib.rs","line":8},".tk1":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-tk1/src/lib.rs","line":8},".tx1":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-tx1/src/lib.rs","line":8},".tx2":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-tx2/src/lib.rs","line":8},".ultra96":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-ultra96/src/lib.rs","line":8},".wandq":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-wandq/src/lib.rs","line":8},".zynq7000":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-zynq7000/src/lib.rs","line":8},".zynqmp":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-zynqmp/src/lib.rs","line":8}}}},"subnames":[".allwinnera20",".am335x",".apq8064",".buildcrate",".class",".exynos4",".exynos5250",".exynos5410",".exynos5422",".hikey",".imx7sabre",".omap3",".pc99",".rpi3",".sabre",".support_debug_on_am335x",".support_debug_on_omap",".tk1",".tx1",".tx2",".ultra96",".wandq",".zynq7000",".zynqmp"]},"SPC-sel4syscrate":{"id":"CMbV24fuDeF52f81VivSew","name":"SPC-sel4syscrate","file":"/home/travis/build/sbosnick/selection/design/sel4sys.md","partof":["REQ-sel4syscrate"],"parts":["TST-sel4syscrate"],"completed":{"spc":1.0,"tst":0.75},"text":"[[.cmake]]\\:The 'seL4-sys' crate will use the [cmake] crate and a custom CMakeLists.txt file to\ndrive the compilation of libsel4. The custom CMakeLists.txt file is needed because\nthe CMakeLists.txt file at the root of the seL4 repository and in the libsel4 subdirectory\nis are fragments that are intended to be embedded in a larger cmake based proejct. The\ntemplate for the custom CMakeLists.txt is the [base.cmake] file from the seL4_tools\nproject.\n\n[[.bingen]]\\:The crate will also use [bindgen] to generate Rust FFI code that calls into libsel4.\nThe uses of [bindgen] will blacklist any platform specific parts of libsel4.\n\nThe build.rs script for this crate will set cmake configuration options for building\nlibsel4 as described below.\n\n- KernelArch: CARGO_CFG_TARGET_ARCH\n- KernelArmSel4Arch: CARGO_CFG_TARGET_ARCH\n- KernelX86Sel4Arch: CARGO_CFG_TARGET_ARCH\n- KernelVerificationBuild: PROFILE\n- KernelDebugBuild: PROFILE\n- KernelPrinting: PROFILE\n- HardwareDebugAPI: PROFILE and CARGO_CFG_TARGET_ARCH\n- KernelDangerousCodeInjection: off (default)\n- KernelX86DangerousMSR: off (default)\n- LibSel4FunctionAttributes: set to \"public\"\n\nHardwareDebugAPI will be off for a release build or an AArch64 debug build and will\nbe on for other debug builds.\n\nAll other cmake configuration options will use their default values.\n\n[cmake]: https://crates.io/crates/cmake\n[base.cmake]: https://github.com/seL4/seL4_tools/blob/master/cmake-tool/base.cmake\n[bindgen]: https://crates.io/crates/bindgen\n","impl_":{"type":"Code","value":{"primary":{"file":"/home/travis/build/sbosnick/selection/sel4-sys/Cargo.toml","line":0},"secondary":{".bingen":{"file":"/home/travis/build/sbosnick/selection/sel4-sys/build.rs","line":18},".cmake":{"file":"/home/travis/build/sbosnick/selection/sel4-sys/build.rs","line":14}}}},"subnames":[".bingen",".cmake"]},"TST-cargocmd":{"id":"JI_-vahfBxuVT5p1pgOBmA","name":"TST-cargocmd","file":"/home/travis/build/sbosnick/selection/design/cargocmd.md","partof":["SPC-cargocmd"],"parts":[],"completed":{"spc":0.0,"tst":0.0},"text":"\"cargo-fit\" shall have at least the following tests\n\n- [[.nobootloader]]: a workspace without a bootloader crate is an error\n- [[.nokernel]]: a workspace that does not build the seL4 microkernel through\n    a sel4-plat-\\* crate is an error\n- [[.manykernels]]: a workspace that builds more than 1 seL4 microkernel is an error\n- [[.norootserver]]: a workspace without a rootserver is an error\n- [[.sucess]]: a workspace with a bootloader, a rootserver, and exactly one\n    seL4 microkernel shall sucessfully produce the expected output file\n","impl_":{"type":"NotImpl"},"subnames":[".manykernels",".nobootloader",".nokernel",".norootserver",".sucess"]},"TST-elfpreload":{"id":"uVtK4UYFCXl39pH0TGC_Wg","name":"TST-elfpreload","file":"/home/travis/build/sbosnick/selection/design/cargocmd.md","partof":["SPC-elfpreload"],"parts":[],"completed":{"spc":1.0,"tst":1.0},"text":"The \"elf-preload\" crate shall have at least the following tests:\n\n- [[.elflint]]: the output of \"elf-preload\" shall pass a run of eu-elflint from\n    the [elfutils] project;\n- [[.idempotent]]: the program headers in the ouput of \"elf-preload\" shall account\n    for every byte of the output\n- [[.nosections]]: the output of \"elf-preload\" shall not contain section headers;\n- [[.segments]]: the output of \"elf-preload\" shall contain a PT_PHDR segment, \n    PT_LOAD segments, and nothing else;\n\n[elfutils]: https://sourceware.org/elfutils/\n","impl_":{"type":"Code","value":{"primary":{"file":"/home/travis/build/sbosnick/selection/elf-preload/tests/generaltst.rs","line":7},"secondary":{".elflint":{"file":"/home/travis/build/sbosnick/selection/elf-preload/tests/elflint.rs","line":7},".idempotent":{"file":"/home/travis/build/sbosnick/selection/elf-preload/tests/generaltst.rs","line":25},".nosections":{"file":"/home/travis/build/sbosnick/selection/elf-preload/tests/generaltst.rs","line":75},".segments":{"file":"/home/travis/build/sbosnick/selection/elf-preload/tests/generaltst.rs","line":52}}}},"subnames":[".elflint",".idempotent",".nosections",".segments"]},"TST-fitimage":{"id":"gzzpWp9_MOU8xK2i2VtNLA","name":"TST-fitimage","file":"/home/travis/build/sbosnick/selection/design/cargocmd.md","partof":["SPC-fitimage"],"parts":[],"completed":{"spc":0.0,"tst":0.0},"text":"The \"fitimage\" crate shall have at least the following tests:\n\n- [[.dtcrecognize]]: the output of \"fitimage\" shall be recognized by the [dtc] command\n- [[.fitimagematch]]: the \"fit-image\" FDT that is produced by \"fitimage\" shall match\n    in both image name and load-addr property with the image names and load property\n    of the corresponding subnode of the \"images\" node in the output file itself for\n    all \"loadable\" images\n\n[dtc]: http://manpages.ubuntu.com/manpages/trusty/man1/dtc.1.html\n","impl_":{"type":"NotImpl"},"subnames":[".dtcrecognize",".fitimagematch"]},"TST-sel4platcrate":{"id":"LC760XbCZi0gTmn4JNF5Hg","name":"TST-sel4platcrate","file":"/home/travis/build/sbosnick/selection/design/sel4plat.md","partof":["SPC-sel4platcrate"],"parts":[],"completed":{"spc":1.0,"tst":1.0},"text":"The sel4-plat-pc99 crate shall have a smoke test that checks for a kernel.elf \nfile in the expected location. This one smoke test will be a proxie for all of\nthe platform crates.\n","impl_":{"type":"Code","value":{"primary":{"file":"/home/travis/build/sbosnick/selection/sel4-plat-pc99/tests/kernel.rs","line":13},"secondary":{}}},"subnames":[]},"TST-sel4syscrate":{"id":"d91JUvVi-mQtm772wL_W2Q","name":"TST-sel4syscrate","file":"/home/travis/build/sbosnick/selection/design/sel4sys.md","partof":["SPC-sel4syscrate"],"parts":[],"completed":{"spc":0.75,"tst":0.75},"text":"The 'sel4-sys' crate shall have at least the following tests:\n\n- [[.compile]]: a smoke test that a simple call from Rust code compiles\n- [[.run]]: a smoke test that a simple call from Rust code runs in QEMU\n- [[.platform]]: a test that compiling libsel4 for different platforms is binary\n        identical\n\nThe last test verifies an implicit assumption of dividing out the platform specific\nparts of libsel4 from the rest of that library.\n","impl_":{"type":"Code","value":{"primary":{"file":"/home/travis/build/sbosnick/selection/sel4-sys/Cargo.toml","line":0},"secondary":{".compile":{"file":"/home/travis/build/sbosnick/selection/sel4-sys/examples/smoketest.rs","line":29},".platform":{"file":"/home/travis/build/sbosnick/selection/sel4-sys/tests/platform.rs","line":23}}}},"subnames":[".compile",".platform",".run"]}}},"web_type":"Static"}